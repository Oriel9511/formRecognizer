@page "/business-card"

@using Growth_Strategy_Form_Recognizer.Data
@using System.Reflection
@using System.Dynamic
@using System.Text.Json
@inject IDataStorage DataStorage;
@inject IEnumerable<IFormAnalysis> FormAnalyses;
@inject IJSRuntime JSRuntime

<div style="position: absolute; 
            height: 95vh;
            width: 84vw;
            top: 0" 
     xmlns="http://www.w3.org/1999/html">

    <div class="d-flex gap-3 w-75 justify-content-start align-items-center" 
         style="
            z-index: 1000;
            position: fixed;
            top: .5rem">
        <div>
            <label for="miInputFile2" class="btn btn-primary @_disableLoadBtn">
                @if (_loading == "Loading...")
                {
                    <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                    <span>Loading...</span>
                }
                else
                {
                    <span>Select Files</span>
                }
            </label>
            <InputFile id="miInputFile2" OnChange="@LoadFiles" multiple style="display: none"/>
        </div>
        @if (_loading == "Loading...")
        {
            @* <div class="progress" role="progressbar" aria-label="Doc processing progress" aria-valuemin="0" aria-valuemax="100"> *@
            @*     <div class="@($"progress-bar w-75")"></div> *@
            @* </div> *@
            <div class="w-75">
                <div class="progress w-100" role="progressbar" aria-label="Basic example" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100">
                    <div class="progress-bar" style="@($"width: {_progress}%;")"></div>
                </div>
            </div>
        }
        @* @if (_data != null) *@
        @* { *@
        @*     <button class="btn btn-success" @onclick="ExportToExcel">Export to Excel</button> *@
        @* } *@
    </div>

    <div style="
                position: absolute; 
                left: 0; 
                width: 50%; 
                max-height: 93vh; 
                overflow-y: auto; 
                top: 4rem">
        @if (_doc.Count > 0)
        {
            for (int docCount = 0; docCount < _doc.Count; docCount++)
            {
                <h6>Document @(docCount)</h6>
                @if (_data != null)
                {
                    _tableCount = 0;

                    <div
                        style="background: #bcbebf; 
                            max-height: 90vh"
                        class="mt-2 overflow-scroll">
                        @foreach (var card in _doc[docCount])
                        {
                            <table class="table mt-2 table-bordered" id="@($"businessCard{docCount + _tableCount}")">
                                <thead>CARD @(docCount + _tableCount)</thead>
                                <tbody>
                                @foreach (var prop in card.GetType().GetProperties())
                                {
                                    var propValue = prop.GetValue(card);
                                    @if (propValue != null)
                                    {
                                        <tr>
                                            <th>@prop.Name</th>
                                            <td class="d-block gap-1">
                                                @foreach (var item in (propValue as IEnumerable<string>)!)
                                                {
                                                    <p>@item</p>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                                </tbody>
                            </table>
                            _tableCount++;
                        }
                    </div>
                }
                else
                {
                    <div class="d-flex mt-4 gap-2 w-auto">
                        <img
                            class="border border-3 border-secondary rounded-3"
                            style="filter: fade(5)"
                            src="images/business_card_example.jpg" alt="Logsheet image"/>
                        <h6 class="text-secondary align-self-end">Example Document</h6>
                    </div>

                }
            }
        }
    </div> 

    @if (_fileUrl != null)
    {
        var uri = new Uri(_fileUrl);
        var fileName = Path.GetFileName(uri.LocalPath);
        var extension = Path.GetExtension(fileName);
        var mimeType = "";
        
        switch (extension)
        {
            case ".jpg":
            case ".jpeg":
            case ".png":
            case ".gif":
                mimeType = "image/" + extension.TrimStart('.');
                break;
            case ".pdf":
                mimeType = "application/pdf";
                break;
        }

        <div style="position: absolute; right: 0; width: 50%; height: 100%; top: 4vh">
            <iframe src="@_fileUrl" type="@mimeType" style="width: 100%; height: 100%"></iframe>
        </div>
    }
</div>

@code {
    private int _tableCount = 0;
    // private async Task ExportToExcel()
    // {
    //     dynamic tableIDs = new ExpandoObject();
    //
    //     for(int i = 0; i < _tableCount; i++)
    //     {
    //         string key = $"businessCard{i}";
    //         ((IDictionary<string, object>)tableIDs)[key] = key;
    //     }
    //
    //     _tableCount = 0;
    //     string jsonTableIDs = JsonSerializer.Serialize(tableIDs);
    //     await JSRuntime.InvokeVoidAsync("exportTablesToExcelFromJson", jsonTableIDs);
    // }
}